<?php
/**
 * Implementation of hook_init().
 */
function passwordless_init() {
  if (variable_get('passwordless_show_help', 1) && request_uri() == '/user/login' && variable_get('passwordless_add_css', 1) == 1) {
    drupal_add_css(drupal_get_path('module', 'passwordless') .'/passwordless.css');
  }
}

/**
 * Implements hook_permission().
 */
function passwordless_permission() {
  return array(
    'configure passwordless settings' => array(
      'title' => t('Configure Passwordless settings')
    ),
  );
}

/**
 * Implements hook_menu().
 */
function passwordless_menu() {
  $items['help/passwordless'] = array(
    'title' => _passwordless_text('help_link_text'),
    'page callback' => 'passwordless_help_page',
    'access callback' => 'passwordless_help_access',
    'type' => MENU_CALLBACK,
  );

  $items['user/login/sent'] = array(
    'title' => _passwordless_text('sent_title_text'),
    'page callback' => 'passwordless_login_sent',
    'access callback' => 'passwordless_login_sent_access',
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/people/passwordless'] = array(
    'title' => 'Passwordless settings',
    'description' => 'Configure display and communication options for passwordless login.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('passwordless_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('configure passwordless settings'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function passwordless_menu_alter(&$items) {
  $items['user']['title'] = $items['user/login']['title'];
  // Redirect user/password to user
  $items['user/password']['page callback'] = 'drupal_goto';
  $items['user/password']['page arguments'] = array('user');
  unset($items['user/password']['file'], $items['user/password']['type']);

  $items['user/reset/%/%/%']['page arguments'] = array('passwordless_reset', 2, 3, 4);
  unset($items['user/reset/%/%/%']['file']);
}

function passwordless_settings() {
  $form['passwordless_add_css'] = array(
    '#type' => 'checkbox',
    '#title' => t('Include stylesheet on login page'),
    '#description' => t('Used to style #passwordless-help-link. Clearing the cache might be necessary for any changes to take effect.'),
    '#default_value' => variable_get('passwordless_add_css', 1)
  );

  $form['passwordless_show_help'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show Passwordless help'),
    '#description' => t('Enable help page and provide link to it from the login form.'),
    '#default_value' => variable_get('passwordless_show_help', 1)
  );

  $form['passwordless_help_link_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Passwordless help-link text'),
    '#description' => t('The link will be displayed in the login form. For multilingual sites, enter it in English.'),
    '#default_value' => variable_get('passwordless_help_link_text', _passwordless_text('help_link_text')),
  );

  $form['passwordless_help_text'] = array(
    '#type' => 'textarea',
    '#title' => t('Passwordless help-page text'),
    '#description' => t('For multilingual sites, enter it in English.'),
    '#default_value' => variable_get('passwordless_help_text', _passwordless_text('help_text')),
  );

  $form['passwordless_toggle_sent_page'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable confirmation page'),
    '#description' => t('Display the confirmation message on a different page. Uncheck this box to display it as a regular Drupal message. (If the site is in maintenance mode, the Drupal message will be shown by default.) Clearing the cache might be necessary for any changes to take effect.') . ' ' . l(t('You can also test the confirmation page.'), 'help/passwordless', array('attributes' => array('target' => '_blank'))),
    '#default_value' => variable_get('passwordless_toggle_sent_page', 0)
  );

  $form['passwordless_sent_title_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Title of the confirmation page'),
    '#description' => t('For multilingual sites, enter it in English.'),
    '#default_value' => variable_get('passwordless_sent_title_text', _passwordless_text('sent_title_text')),
  );

  $form['passwordless_sent_page_text'] = array(
    '#type' => 'textarea',
    '#title' => t('Text of the confirmation page'),
    '#description' => t('For multilingual sites, enter it in English.'),
    '#default_value' => variable_get('passwordless_sent_page_text', _passwordless_text('sent_page_text')),
  );

  return system_settings_form($form);
}

function passwordless_help_page() {
  return t(_passwordless_text('help_text'));
}

/**
 * Implements hook_form_alter().
 */
function passwordless_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'user_login' :
    case 'user_login_block' :
      $form = drupal_get_form('passwordless_login');
    break;

    case 'user_admin_settings' :
      $form['email_password_reset']['#title'] = t('Login-link request');
      $form['email_password_reset']['#description'] = t('Edit the e-mail message sent to users who request a login link.');
    break;

    case 'user_register_form' :
      // Hides the password field, and populates it with a random password
      $form['account']['pass']['#type'] = 'value';
      $form['account']['pass']['#value'] = sha1(user_password());
    break;

    case 'user_profile_form' :
      $form['account']['mail']['#description'] = t('A valid e-mail address. All e-mails from the system will be sent to this address. The e-mail address is not made public and will only be used to send you a login link or if you wish to receive certain news or notifications by e-mail.');
      $validate_unset = array_search('user_validate_current_pass', $form['#validate']);
      unset($form['#validate'][$validate_unset], $form['account']['pass'], $form['account']['current_pass']);
    break;
  }
}

// Copied and adapted from user_pass.
// Removed code pertaining to logged-in users, as it's superfluous
function passwordless_login() {
  global $user;

  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('E-mail address'),
    '#size' => 60,
    '#maxlength' => max(USERNAME_MAX_LENGTH, EMAIL_MAX_LENGTH),
    '#required' => TRUE,
  );

  if ( module_exists('html5_tools') ) {
    $form['name']['#type'] = 'emailfield';
  }

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Log in'),
  );

  if (variable_get('passwordless_show_help', 1) && (!variable_get('maintenance_mode', 0) || user_access('access site in maintenance mode'))) {
    $form['passwordless_help_link'] = array(
      '#type' => 'markup',
      '#markup' => theme('passwordless_help_link'),
      '#weight' => 1000,
    );
  }

  return $form;
}

// Copied and adapted from user_pass_validate
// Removed load-by-name code
function passwordless_login_validate($form, &$form_state) {
  $name = trim($form_state['values']['name']);

  // If the multiple_email module is installed, use it to locate the user account.
  if (module_exists('multiple_email')) {
    $email = multiple_email_find_address($name);

    if ($email && isset($email->uid) && $email->confirmed == 1) {
      // There is only one uid, so user_load will do the trick
      $account = user_load($email->uid);

      // Make sure account is active
      if ($account->status == 1) {
        // Patch the temporary record with the e-mail address from multiple_email
        $account->mail = $email->email;
      }
      else {
        unset($account);
      }
    }
  }
  else {
    // Try to load by email.
    $users = user_load_multiple(array(), array('mail' => $name, 'status' => '1'));
    $account = reset($users);
  }

  if (!empty($account->uid)) {
    form_set_value(array('#parents' => array('account')), $account, $form_state);
  }
  else {
    form_set_error('name', t('Sorry, %name is not recognized as a valid e-mail address on this website.', array('%name' => $name)));
  }
}

// Copied and adapted from user_pass_submit
function passwordless_login_submit($form, &$form_state) {
  global $language;

  $account = $form_state['values']['account'];
  // Mail one time login URL and instructions using current language.
  $mail = _user_mail_notify('password_reset', $account, $language);
  if (!empty($mail)) {
    watchdog('passwordless', 'Login link mailed to %name at %email.', array('%name' => $account->name, '%email' => $account->mail));
    if (variable_get('passwordless_toggle_sent_page', 0) == 1 && variable_get('maintenance_mode', 0) == 0) {
      $form_state['redirect'] = 'user/login/sent';
    }
    else {
      drupal_set_message(t('The login link has been sent to your e-mail address.'));
    }
  }

  return;
}

// Copied and adapted from user_pass_reset
function passwordless_reset($form, &$form_state, $uid, $timestamp, $hashed_pass, $action = NULL) {
  global $user;

  // When processing the one-time login link, we have to make sure that a user
  // isn't already logged in.
  if ($user->uid) {
    // The existing user is already logged in.
    if ($user->uid == $uid) {
      drupal_set_message(t('You are already logged in as %user.', array('%user' => $user->name)));
    }
    // A different user is already logged in on the computer.
    else {
      $reset_link_account = user_load($uid);
      if (!empty($reset_link_account)) {
        drupal_set_message(t('Another user (%other_user) is already logged into the site on this computer, but you tried to use a one-time link for user %resetting_user. Please <a href="!logout">logout</a> and try using the link again.',
          array('%other_user' => $user->name, '%resetting_user' => $reset_link_account->name, '!logout' => url('user/logout'))));
      }
      else {
        // Invalid one-time link specifies an unknown user.
        drupal_set_message(t('The one-time login link you clicked is invalid.'));
      }
    }
    drupal_goto();
  }
  else {
    // Time out, in seconds, until login URL expires. Defaults to 24 hours =
    // 86400 seconds.
    $timeout = variable_get('user_password_reset_timeout', 86400);
    $current = REQUEST_TIME;
    // Some redundant checks for extra security ?
    $users = user_load_multiple(array($uid), array('status' => '1'));
    if ($timestamp <= $current && $account = reset($users)) {
      // No time out for first time login.
      if ($account->login && $current - $timestamp > $timeout) {
        drupal_set_message(t('You have tried to use a one-time login link that has expired. Please request a new one using the form below.'), 'warning');
        drupal_goto('user/login');
      }
      elseif ($account->uid && $timestamp >= $account->login && $timestamp <= $current && $hashed_pass == user_pass_rehash($account->pass, $timestamp, $account->login, $account->uid)) {
        // First stage is a confirmation form, then login
        if ($action == 'login') {
          watchdog('user', 'User %name used one-time login link at time %timestamp.', array('%name' => $account->name, '%timestamp' => $timestamp));
          // Set the new user.
          $user = $account;
          // user_login_finalize() also updates the login timestamp of the
          // user, which invalidates further use of the one-time login link.
          user_login_finalize();
          drupal_set_message(t('You have just used your one-time login link. You will remain logged in until you explicitly log out.'));
          $user->pass = sha1(user_password());
          user_save($user);
          drupal_goto('user');
        }
        else {
          // Login directly without an extra step
          drupal_goto("user/reset/$uid/$timestamp/$hashed_pass/login");
        }
      }
      else {
        drupal_set_message(t('You have tried to use a one-time login link that has either been used or is no longer valid. Please request a new one using the form below.'), 'warning');
        drupal_goto('user/login');
      }
    }
    else {
      // Deny access, no more clues.
      // Everything will be in the watchdog's URL for the administrator to check.
      drupal_access_denied();
      drupal_exit();
    }
  }
}

function passwordless_login_sent() {
  $http_referer = check_url($_SERVER['HTTP_REFERER']);
  // If not called from a login form, or if user doesn't have permission, redirect to user
  if (!user_access('configure passwordless settings') && $http_referer != url('user', array('absolute' => TRUE)) && $http_referer != url('user/login', array('absolute' => TRUE))) {
    drupal_goto('user');
  }
  else {
    return t(_passwordless_text('sent_page_text'));
  }

}

function passwordless_login_sent_access() {
  if (user_is_anonymous() || user_access('configure passwordless settings')) :
    return TRUE;
  endif;
}

function theme_passwordless_help_link() {
  return l(t(_passwordless_text('help_link_text')), 'help/passwordless', array('attributes' => array('id' => 'passwordless-help-link', 'rel' => 'nofollow')));
}

/**
 * Implements hook_theme().
 */
function passwordless_theme() {
  return array(
    'passwordless_help_link' => array()
  );
}

function _passwordless_text($key) {
  if ($key_setting = variable_get('passwordless_' . $key, FALSE)) {
    $text = $key_setting;
  }
  else {
    switch ($key) {
      case 'help_link_text' :
        $text = 'What? No password?';
      break;
      case 'help_text' :
        $text = '<p>This website provides passwordless login, an advanced login system that allows people to register and sign on securely with no need to remember a new password—or, worse, to use an insecure one.</p>

<p>Your account is kept safe by Drupal&#8217;s security mechanisms, and the only password you need to remember is the one to your e-mail account. Every time you need to log in, just enter your e-mail address in the form, then click &#8220;Log in.&#8221; Within seconds, you&#8217;ll receive a link that will allow you to log in directly. This link is single-use (meaning that no one else can use it after you), and expires in twenty-four hours.</p>

<p>If you use this website from your own computer, chances are you won&#8217;t need to receive this link more than once, unless you log out manually or clear your browser&#8217;s cookies. If you log in through a shared computer, always remember to log out when you&#8217;re finished. The next time you need to log in, just request a new link.</p>';
      break;
      case 'sent_title_text' :
        $text = 'Check your e-mail!';
      break;
      case 'sent_page_text' :
        $text = '<p>The login link has been sent to your e-mail address.<br />
You should receive it shortly.</p>';
      break;
    }
  }

  $allowed_tags = array('a', 'em', 'strong', 'ul', 'ol', 'li', 'p');
  return filter_xss($text, $allowed_tags);
}

function passwordless_help_access() {
  return variable_get('passwordless_show_help', 1) && user_access('access content');
}
